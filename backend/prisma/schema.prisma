// Salon Booking System Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Predefined salon services
model ServiceType {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  category    String    // e.g., "Hair", "Nails", "Facial", "Massage"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  storeServices StoreService[]
}

// User types enum
enum UserType {
  OWNER
  CUSTOMER
  EMPLOYEE
}

// User roles enum
enum UserRole {
  USER
  ADMIN
}

// Base user model
model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  name        String
  phoneNumber String
  userType    UserType
  role        UserRole  @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  owner    Owner?
  customer Customer?
  employee Employee?
}

// Owner profile
model Owner {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  razorpayAccountId String?
  bankAccount BankAccount?
  ownerCode String @unique // Unique code for customers to access owner's stores

  // Relations
  stores Store[]
  payments Payments[]
  customers Customer[] // Customers associated with this owner
  
  @@map("owners")
}

model BankAccount {
  id String @id @default(uuid())
  accountName String
  accountNumber String
  ifscCode String
  bankName String
  branchName String
  accountType String
  accountHolderName String
  contactId   String?  // razorpayX contact ID
  fundAccountId String?  // razorpayX fund account ID
  ownerId String @unique
  owner Owner @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("bank_accounts")
}

// Customer profile
model Customer {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferredServices String[] // Array of service type IDs
  payments Payments[]
  ownerId String? // Associated owner ID
  owner Owner? @relation(fields: [ownerId], references: [id])
  
  // Relations
  bookings Booking[]

  @@map("customers")
}

// Employee profile
model Employee {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  employeeId  String   @unique // Custom employee ID
  designation String   // e.g., "Hair Stylist", "Nail Technician", "Manager"
  hireDate    DateTime @default(now())
  salary      Float?
  isActive    Boolean  @default(true)
  
  // Relations
  storeEmployees StoreEmployee[]
  bookings       Booking[] // Bookings assigned to this employee
  availability   EmployeeAvailability[]
  
  @@map("employees")
}

// Store/Salon
model Store {
  id          String   @id @default(uuid())
  name        String
  email       String?
  address     String
  phoneNumber String?
  latitude    Float?
  longitude   Float?
  ownerId     String
  owner       Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  services        StoreService[]
  bookings        Booking[]
  availability    StoreAvailability[]
  storeEmployees  StoreEmployee[]
  employeeAvailability EmployeeAvailability[]
  
  @@map("stores")
}

// Store-Employee relationship (Many-to-Many)
model StoreEmployee {
  id         String   @id @default(uuid())
  storeId    String
  employeeId String
  role       String   // e.g., "Hair Stylist", "Nail Technician", "Manager"
  isActive   Boolean  @default(true)
  joinedAt   DateTime @default(now())
  leftAt     DateTime?
  
  // Relations
  store    Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  @@unique([storeId, employeeId])
  @@map("store_employees")
}

// Services offered by a store
model StoreService {
  id            String      @id @default(uuid())
  storeId       String
  serviceTypeId String
  price         Float
  duration      Int         // Duration in minutes
  description   String?
  isActive      Boolean     @default(true)
  
  // Relations
  store       Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  serviceType ServiceType @relation(fields: [serviceTypeId], references: [id])
  bookings    Booking[]
  
  @@unique([storeId, serviceTypeId])
  @@map("store_services")
}

// Store availability
model StoreAvailability {
  id        String   @id @default(uuid())
  storeId   String
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, etc.
  startTime String   // Format: "09:00"
  endTime   String   // Format: "18:00"
  isActive  Boolean  @default(true)
  
  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  @@unique([storeId, dayOfWeek])
  @@map("store_availability")
}

// Employee availability
model EmployeeAvailability {
  id         String   @id @default(uuid())
  employeeId String
  storeId    String
  dayOfWeek  Int      // 0 = Sunday, 1 = Monday, etc.
  startTime  String   // Format: "09:00"
  endTime    String   // Format: "18:00"
  isActive   Boolean  @default(true)
  
  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  store    Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  @@unique([employeeId, storeId, dayOfWeek])
  @@map("employee_availability")
}

// Booking status enum
enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

// Payment status enum
enum PaymentStatus {
  PENDING
  PARTIAL    // 50% paid
  FULL       // 100% paid
  REFUNDED
}

// Bookings
model Booking {
  id              String        @id @default(uuid())
  customerId      String
  storeId         String
  storeServiceId  String
  employeeId      String?       // Optional: assigned employee
  bookingDate     DateTime
  startTime       String        // Format: "14:30"
  endTime         String        // Format: "15:30"
  totalPrice      Float
  paidAmount      Float         @default(0)
  paymentStatus   PaymentStatus @default(PENDING)
  status          BookingStatus @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  customer     Customer     @relation(fields: [customerId], references: [id])
  store        Store        @relation(fields: [storeId], references: [id])
  storeService StoreService @relation(fields: [storeServiceId], references: [id])
  employee     Employee?    @relation(fields: [employeeId], references: [id])  
  @@map("bookings")
}

enum PaymentPayoutStatus {
  PENDING
  PAIDOUT
}


model Payments {
  id String @id @default(uuid())
  amount Float
  paidBy  Customer @relation(fields: [paidById], references: [id])
  paidById String
  paidTo  Owner @relation(fields: [paidToId], references: [id])
  paidToId String
  status PaymentPayoutStatus @default(PENDING)
  payoutId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("payments")
}